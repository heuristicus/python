#!/usr/bin/python 
# -*- coding: utf-8 -*- #
"""This script takes latex generated by cardcreator.py and extracts
flashcards from it.  It's very specific, and so perhaps even a small
change in the latex layout will cause problems.  Here are some
guidelines on how not to break it:

- Separate each flashcard definition by two newline characters
  (pressing enter twice)


It shouldn't break since regex is being used, but there's still a
chance.
"""
import sys
import re
import xmlise
from datetime import datetime

def read_cards(filename):
    """Reads multiple flashcards from a latex formatted file.
    
    Arguments:
    - `filename`: File to read cards from.
    """
    f = open(filename, 'rU')
    s = f.read()
    # Splits the whole file based on where the text is split by two
    # newline characters.  Flashcards should be separated in this way
    # by default if using cardcreator.py.
    split = s.split('\n\n')
    cards = []
    for block in split:
        # Looks for the signs of a flashcard in the first 20
        # characters of the string
        s = re.search(r'\\begin{flashcard}', block[:20])
        # Appends the block to a card list if the regex finds a match.
        if s:
            cards.append(block)

    c_cards = []
    # Gets the components of each card by extracting data from the
    # blocks containing cards
    for card in cards:
        c_cards.append(get_card_components(card))
        #print 'Card done.'

    return c_cards

def get_card_components(card):
    """Gets the parts of the flashcard that can vary, and returns them
    in a list.

    This gets the values for a single flashcard.
    
    Arguments:
    - `card`: A latex flashcard definition.
    """
    # Find the kanji for the flashcard
    kanji = re.findall(r'}]{.*}', card)
    # Find the english definitions for the flashcard
    eng_def = re.findall(r'bf{[a-zA-Z\s()]*}', card)
    # Find the katakana and hiragana readings for the flashcard
    readings = re.findall(r'\\selectfont\n\s*\\begin{tabular}{c}.*\\end{tabular}\n\s*\\end{minipage}', card, re.DOTALL)
    # Find the compound definitions
    comp = re.findall(r'\\df{.*}', card)
    
    comp_list = [kanji, eng_def, readings, comp]
    extracted = extract_data(comp_list)
    return extracted
    

def extract_data(component_list):
    """Extracts relevant data from regex output
    
    Arguments: 
    - `component_list`: A list of components of a flashcard: 
    kanji, english definitions, readings and compounds, in
    that order.
    """
    kanji = extract_kanji(component_list[0])
    english = extract_english(component_list[1])
    readings = extract_readings(component_list[2])
    compounds = extract_compounds(component_list[3])
    return [kanji, english, readings, compounds]

def extract_kanji(kanji_re):
    """Extracts the kanji from a regex in the form r'}]{.*}'
    
    Arguments:
    - `kanji_re`: String result from a regex.
    """
    return kanji_re[0][3:-1]
   
def extract_english(eng_defs):
    """Extracts the english definitions of a kanji from the results of
    a regexp r'bf{[a-zA-Z]*}'
    
    Arguments:
    - `eng_defs`: List of english definitions from regex.
    """
    ext = []
    for def_ in eng_defs:
        print def_
        ext.append(def_[3:-1])
    return ext

def extract_readings(readings):
    """Extracts the readings from a regexp in the form:

    r'\\selectfont\n\s*\\begin{tabular}{c}.*\\end{tabular}\n\s*\\end{minipage}'
    
    DOTALL flag is on.
    
    Arguments:
    - `readings`: Readings from regex.
    """
    s = readings[0].split('\n')
    tmp = s[2:-2]
    ext = []
    for str_ in tmp:
        ext.append(str_.replace('\\\\', '').strip())
    return ext


def extract_compounds(compounds):
    """Extracts the compounds from a regex in the form
    
    r'\\df{.*}\\'

    Arguments:
    - `compounds`: Compound string received from regexp.
    """
    comps = []
    meanings = []
    for compound in compounds:
        # gets the groups inside the curly braces out
        s = re.search(r'\\df{(.*)}{(.*)}', compound)
        # first group is the japanese text with ruby
        comps.append(s.group(1))
        # second group is the english meaning
        meanings.append(s.group(2))

    ext_comp = []
    count = 0
    for comp in comps:
       c = break_comp(comp)
       ext_comp.append([c,meanings[count]])
       count += 1
    return ext_comp
    

def break_comp(comp):
    """Breaks a compound string into constituent parts - kanji,
    hiragana of kanji and leftover hiragana, and returns a list of
    tuples in the form (kanji, furigana, okurigana).  Often, there
    will be no okurigana. In this case, an empty string will be
    present in tuple(2).
    
    Arguments:
    - `comp`: Extracted compound.
    """
    # Splits into parts where the \\ruby command is used.
    parts = comp.split('\\')[1:]
    comb = []
   
    for part in parts:
        # gets groups for kanji (1), furigana (2), okurigana (3).
        p = re.search('{(.*)}{(.*)}(.*)', part)
        # appends a tuple of these values to the list.
        comb.append((p.group(1), p.group(2), p.group(3)))
    return comb
        
    
def main():
    """Main method, runs if script is run as the main script. Two
    arguments should be passed: tex file to read the cards from, and
    the file to write the xml to.
    """
    args = sys.argv[1:]
    if len(args) > 2 or len(args) <= 0:
        print 'You\'re missing some arguments, or have too many. \nGive me the tex file you want me to read, and the file that you want to output the xml to. \nIf you just give me a tex file, I\'ll create a default xml file in the current folder.'
        sys.exit(1)
    if len(args) == 1:
        # creates a filename to use to output data to if a filename is not provided.
        now = datetime.now()
        now = now.strftime('_%Y-%m-%d_%H:%M')
        out_file = 'xmlised_cards%s.xml'%(now)
        print 'Output file not specified. Writing to %s.'%(out_file)
    else:
        out_file = args[1]
        print 'Writing output to %s'%(out_file)
    cards = read_cards(args[0])
    # CHECK xmlise.py TO SEE WHAT THIS DOES
    xmlise.xmlise(cards, out_file)


if __name__ == '__main__':
    main()
